diff --git a/dwm.c b/dwm.c
index 0362114..33223a6 100644
--- a/dwm.c
+++ b/dwm.c
@@ -170,6 +170,7 @@ static void focus(Client *c);
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
 static void focusstack(const Arg *arg);
+static unsigned long getcolor_in_window(const char *colstr, Window w, unsigned long fallback);
 static int getrootptr(int *x, int *y);
 static long getstate(Window w);
 static int gettextprop(Window w, Atom atom, char *text, unsigned int size);
@@ -807,7 +808,7 @@ focus(Client *c)
 		detachstack(c);
 		attachstack(c);
 		grabbuttons(c, 1);
-		XSetWindowBorder(dpy, c->win, scheme[SchemeSel].border->pix);
+		XSetWindowBorder(dpy, c->win, getcolor_in_window(selbordercolor, c->win, scheme[SchemeSel].border->pix));
 		setfocus(c);
 	} else {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
@@ -884,6 +885,22 @@ getatomprop(Client *c, Atom prop)
 	return atom;
 }
 
+unsigned long
+getcolor_in_window(const char *colstr, Window w, unsigned long fallback) {
+	if (!w)
+		return fallback;
+	XWindowAttributes attr;
+	if (!XGetWindowAttributes(dpy, w, &attr))
+		return fallback;
+
+	Colormap cmap = attr.colormap;
+	XColor color;
+
+	if(!XAllocNamedColor(dpy, cmap, colstr, &color, &color))
+		return fallback;
+	return color.pixel;
+}
+
 int
 getrootptr(int *x, int *y)
 {
@@ -1065,7 +1082,7 @@ manage(Window w, XWindowAttributes *wa)
 
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
-	XSetWindowBorder(dpy, w, scheme[SchemeNorm].border->pix);
+	XSetWindowBorder(dpy, w, getcolor_in_window(normbordercolor, w, scheme[SchemeNorm].border->pix));
 	configure(c); /* propagates border_width, if size doesn't change */
 	updatewindowtype(c);
 	updatesizehints(c);
@@ -1745,7 +1762,7 @@ unfocus(Client *c, int setfocus)
 	if (!c)
 		return;
 	grabbuttons(c, 0);
-	XSetWindowBorder(dpy, c->win, scheme[SchemeNorm].border->pix);
+	XSetWindowBorder(dpy, c->win, getcolor_in_window(normbordercolor, c->win, scheme[SchemeNorm].border->pix));
 	if (setfocus) {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
 		XDeleteProperty(dpy, root, netatom[NetActiveWindow]);
